package org.firstinspires.ftc.teamcode.testing;

import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;

import com.qualcomm.hardware.bosch.BNO055IMU;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.DcMotorSimple;

import org.firstinspires.ftc.robotcore.external.navigation.Orientation;

@TeleOp(name = "ðŸ§ª Motor and IMU Test (Mecanum)")
public class MotorAndIMUTest extends LinearOpMode {

    // Motors
    DcMotor lf, lb, rf, rb;

    // IMU
    BNO055IMU imu;
    Orientation angles;

    @Override
    public void runOpMode() {
        // Initialize motors
        lf = hardwareMap.dcMotor.get("lf");
        lb = hardwareMap.dcMotor.get("lb");
        rf = hardwareMap.dcMotor.get("rf");
        rb = hardwareMap.dcMotor.get("rb");

        // Reverse left side motors for correct mecanum behavior
        lf.setDirection(DcMotorSimple.Direction.REVERSE);
        lb.setDirection(DcMotorSimple.Direction.REVERSE);

        // Brake mode
        lf.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
        lb.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
        rf.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
        rb.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);

        // IMU setup
        imu = hardwareMap.get(BNO055IMU.class, "imu");
        BNO055IMU.Parameters imuParams = new BNO055IMU.Parameters();
        imuParams.angleUnit = BNO055IMU.AngleUnit.DEGREES;
        imu.initialize(imuParams);

        telemetry.addLine("Calibrating IMU...");
        telemetry.update();
        while (!isStopRequested() && !imu.isGyroCalibrated()) {
            sleep(50);
            telemetry.addLine("Still calibrating...");
            telemetry.update();
        }
        telemetry.addLine("IMU Calibrated!");
        telemetry.update();

        waitForStart();

        while (opModeIsActive()) {
            // Mecanum control
            double y = -gamepad1.left_stick_y; // Forward
            double x = gamepad1.left_stick_x;  // Strafe
            double rx = gamepad1.right_stick_x; // Rotate

            double denominator = Math.max(Math.abs(y) + Math.abs(x) + Math.abs(rx), 1);
            double fl = (y + x + rx) / denominator;
            double bl = (y - x + rx) / denominator;
            double fr = (y - x - rx) / denominator;
            double br = (y + x - rx) / denominator;

            lf.setPower(fl);
            lb.setPower(bl);
            rf.setPower(fr);
            rb.setPower(br);

            // IMU angles
            angles = imu.getAngularOrientation();

            // Telemetry
            telemetry.addData("FL Power", fl);
            telemetry.addData("FR Power", fr);
            telemetry.addData("BL Power", bl);
            telemetry.addData("BR Power", br);
            telemetry.addData("LF Encoder", lf.getCurrentPosition());
            telemetry.addData("RF Encoder", rf.getCurrentPosition());
            telemetry.addData("IMU Heading (Z)", angles.firstAngle);
            telemetry.update();
        }
    }
}
